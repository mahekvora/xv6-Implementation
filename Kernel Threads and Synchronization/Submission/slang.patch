Binary files original/.git/index and xv6/.git/index differ
diff -ruN original/.git/logs/HEAD xv6/.git/logs/HEAD
--- original/.git/logs/HEAD	2022-09-04 16:46:33.424528245 +0530
+++ xv6/.git/logs/HEAD	2022-08-11 06:13:25.608251000 +0530
@@ -1 +1 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 vani2 <vani2@LAPTOP-FMJO0PVH> 1662290193 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 vani2 <vani2@LAPTOP-FMJO0PVH> 1660178605 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
diff -ruN original/.git/logs/refs/heads/master xv6/.git/logs/refs/heads/master
--- original/.git/logs/refs/heads/master	2022-09-04 16:46:33.424528245 +0530
+++ xv6/.git/logs/refs/heads/master	2022-08-11 06:13:25.608251000 +0530
@@ -1 +1 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 vani2 <vani2@LAPTOP-FMJO0PVH> 1662290193 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 vani2 <vani2@LAPTOP-FMJO0PVH> 1660178605 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
diff -ruN original/.git/logs/refs/remotes/origin/HEAD xv6/.git/logs/refs/remotes/origin/HEAD
--- original/.git/logs/refs/remotes/origin/HEAD	2022-09-04 16:46:33.404528245 +0530
+++ xv6/.git/logs/refs/remotes/origin/HEAD	2022-08-11 06:13:25.608251000 +0530
@@ -1 +1 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 vani2 <vani2@LAPTOP-FMJO0PVH> 1662290193 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 vani2 <vani2@LAPTOP-FMJO0PVH> 1660178605 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
diff -ruN original/.vscode/c_cpp_properties.json xv6/.vscode/c_cpp_properties.json
--- original/.vscode/c_cpp_properties.json	1970-01-01 05:30:00.000000000 +0530
+++ xv6/.vscode/c_cpp_properties.json	2022-09-03 14:49:49.223580253 +0530
@@ -0,0 +1,16 @@
+{
+    "configurations": [
+        {
+            "name": "Linux",
+            "includePath": [
+                "${workspaceFolder}/**"
+            ],
+            "defines": [],
+            "compilerPath": "/usr/bin/gcc",
+            "cStandard": "gnu17",
+            "cppStandard": "gnu++14",
+            "intelliSenseMode": "linux-gcc-x64"
+        }
+    ],
+    "version": 4
+}
\ No newline at end of file
diff -ruN original/.vscode/settings.json xv6/.vscode/settings.json
--- original/.vscode/settings.json	1970-01-01 05:30:00.000000000 +0530
+++ xv6/.vscode/settings.json	2022-09-03 15:19:00.853581343 +0530
@@ -0,0 +1,5 @@
+{
+    "files.associations": {
+        "defs.h": "c"
+    }
+}
\ No newline at end of file
diff -ruN original/Drawtest.c xv6/Drawtest.c
--- original/Drawtest.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6/Drawtest.c	2022-08-12 07:23:44.683956870 +0530
@@ -0,0 +1,13 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(void)
+{
+	static char buf[2000];
+	printf(1,"draw sys call returns %d\n",draw((void*) buf,2000));
+
+	printf(1,"%s",buf);
+	exit();
+}
\ No newline at end of file
diff -ruN original/Makefile xv6/Makefile
--- original/Makefile	2022-09-04 16:46:33.474528245 +0530
+++ xv6/Makefile	2022-09-05 19:28:05.116764137 +0530
@@ -181,6 +181,8 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_Drawtest\
+	_thread\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +219,7 @@
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 2   #change here !!!!!!!!!!!!
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
@@ -249,7 +251,7 @@
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
+	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c Drawtest.c thread.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
diff -ruN original/defs.h xv6/defs.h
--- original/defs.h	2022-09-04 16:46:33.474528245 +0530
+++ xv6/defs.h	2022-08-30 09:22:54.976930423 +0530
@@ -121,6 +121,9 @@
 void            wakeup(void*);
 void            yield(void);
 
+int             thread_create(void(*fcn)(void*), void *arg, void*stack);
+int             thread_join(void);
+int             thread_exit(void);
 // swtch.S
 void            swtch(struct context**, struct context*);
 
diff -ruN original/proc.c xv6/proc.c
--- original/proc.c	2022-09-04 16:46:33.594528245 +0530
+++ xv6/proc.c	2022-08-30 09:38:23.096923951 +0530
@@ -532,3 +532,139 @@
     cprintf("\n");
   }
 }
+
+
+/////////////////////////
+
+
+int thread_create(void(*fcn)(void*), void *arg, void*stack){
+  int i, pid;
+  struct proc *np;
+  struct proc *curproc = myproc();
+  // int *myarg;
+  // int *myret;
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  np->sz = curproc->sz;
+  np->parent = curproc;
+
+  np->pgdir = curproc->pgdir;
+  *np->tf = *curproc->tf;
+  np->is_thread = 1;
+  np->tf->eax = 0;
+  np->tf->eip = (int) fcn; // instruction pointer
+  np->stack = stack;
+
+  // myret = stack + 4096 - 2 * sizeof(int *);
+  // *myret = 0xFFFFFFFF;
+  
+  // myarg = stack + 4096 - sizeof(int *);
+  // *myarg = (int)arg;
+
+  // np->tf->esp = (int)stack +  PGSIZE - 2 * sizeof(int *);
+  // np->tf->ebp = np->tf->esp;
+
+
+  np->tf->esp = (uint)stack + 4092;  // stack pointer
+  *((uint *)(np->tf->esp)) = (uint)arg;
+  *((uint *)(np->tf->esp - 4)) = 0xFFFFFFFF;
+  np->tf->esp -= 4;
+
+  
+  // cprintf("wowww\n");
+  for(i = 0; i < NOFILE; i++)
+    if(curproc->ofile[i])
+      np->ofile[i] = filedup(curproc->ofile[i]);
+  np->cwd = idup(curproc->cwd);
+
+  // cprintf("woww noqqw\n");
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+
+  pid = np->pid;
+
+  acquire(&ptable.lock);
+
+  np->state = RUNNABLE;
+
+  release(&ptable.lock);
+  // cprintf("wowww thirddd\n");
+  return pid;
+}
+
+int thread_join(void){
+  struct proc *p;
+  int havekids, pid;
+  struct proc *curproc = myproc();
+ 
+  acquire(&ptable.lock);
+  for (;;) {
+    havekids = 0;
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+      if (p->parent != curproc || p->is_thread != 1)
+        continue;
+      havekids = 1;
+      if (p->state == ZOMBIE) {
+        pid = p->pid;
+        kfree(p->kstack);
+        p->kstack = 0;
+        p->state = UNUSED;
+        p->pid = 0;
+        p->parent = 0;
+        p->name[0] = 0;
+        p->killed = 0;
+        release(&ptable.lock);
+        return pid;
+      }
+    }
+
+    if (!havekids || curproc->killed) {
+      release(&ptable.lock);
+      return -1;
+    }
+    sleep(curproc, &ptable.lock);
+  }
+}
+
+int thread_exit(void){
+  struct proc *p;
+  struct proc *curproc = myproc();
+  int fd;
+
+  if(curproc == initproc)
+    panic("init exiting");
+
+  for (fd = 0; fd < NOFILE; fd++) {
+    if (curproc -> ofile[fd]) {
+      fileclose(curproc -> ofile[fd]);
+      curproc -> ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+  iput(curproc -> cwd);
+  end_op();
+  curproc -> cwd = 0;
+
+  acquire(&ptable.lock);
+
+  // Parent might be sleeping in wait().
+  wakeup1(curproc->parent);
+
+  // Pass abandoned children to init.
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->parent == curproc){
+      p->parent = initproc;
+      if(p->state == ZOMBIE)
+        wakeup1(initproc);
+    }
+  }
+
+  // Jump into the scheduler, never to return.
+  curproc->state = ZOMBIE;
+  sched(); 
+  panic("zombie exit");
+}
+ 
\ No newline at end of file
diff -ruN original/proc.h xv6/proc.h
--- original/proc.h	2022-09-04 16:46:33.594528245 +0530
+++ xv6/proc.h	2022-08-30 00:54:16.090820313 +0530
@@ -36,6 +36,8 @@
 
 // Per-process state
 struct proc {
+  int is_thread;
+  void *stack;
   uint sz;                     // Size of process memory (bytes)
   pde_t* pgdir;                // Page table
   char *kstack;                // Bottom of kernel stack for this process
diff -ruN original/syscall.c xv6/syscall.c
--- original/syscall.c	2022-09-04 16:46:33.604528245 +0530
+++ xv6/syscall.c	2022-08-30 01:01:08.841833307 +0530
@@ -103,6 +103,11 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_draw(void);
+
+extern int sys_thread_create(void);
+extern int sys_thread_join(void);
+extern int sys_thread_exit(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +131,11 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_draw]    sys_draw,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit,
+
 };
 
 void
diff -ruN original/syscall.h xv6/syscall.h
--- original/syscall.h	2022-09-04 16:46:33.604528245 +0530
+++ xv6/syscall.h	2022-08-29 22:23:56.135019489 +0530
@@ -20,3 +20,7 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_draw   22 
+#define SYS_thread_create 23
+#define SYS_thread_join 24
+#define SYS_thread_exit 25
\ No newline at end of file
diff -ruN original/sysproc.c xv6/sysproc.c
--- original/sysproc.c	2022-09-04 16:46:33.604528245 +0530
+++ xv6/sysproc.c	2022-08-30 09:33:09.726925540 +0530
@@ -7,6 +7,73 @@
 #include "mmu.h"
 #include "proc.h"
 
+int sys_thread_create(void){
+  int func_add;
+  int arg;
+  int stack_add;
+
+  if (argint(0, &func_add) < 0)
+     return -1;
+  if (argint(1, &arg) < 0)
+     return -1;
+  if (argint(2, &stack_add) < 0)
+     return -1;
+ 
+  return thread_create((void *)func_add, (void *)arg, (void *)stack_add);
+}
+
+int sys_thread_join(void){
+  return thread_join();
+}
+
+int sys_thread_exit(void){
+  return thread_exit();
+}
+
+int sys_draw(void){
+  void* buf;
+  uint size;
+  argptr(0, (void *)&buf, sizeof(buf));
+  argptr(1, (void *)&size, sizeof(size));
+
+  char text[] = "                       .,,uod8B8bou,,.\n\
+              ..,uod8BBBBBBBBBBBBBBBBRPFT?l!i:.\n\
+         ,=m8BBBBBBBBBBBBBBBRPFT?!||||||||||||||\n\
+         !...:!TVBBBRPFT||||||||||!!^^\"\"'   ||||\n\
+         !.......:!?|||||!!^^\"\"'            ||||\n\
+         !.........||||                     ||||\n\
+         !.........||||  ##                 ||||\n\
+         !.........||||                     ||||\n\
+         !.........||||                     ||||\n\
+         !.........||||                     ||||\n\
+         !.........||||                     ||||\n\
+         `.........||||                    ,||||\n\
+          .;.......||||               _.-!!|||||\n\
+   .,uodWBBBBb.....||||       _.-!!|||||||||!:'\n\
+!YBBBBBBBBBBBBBBb..!|||:..-!!|||||||!iof68BBBBBb....\n\
+!..YBBBBBBBBBBBBBBb!!||||||||!iof68BBBBBBRPFT?!::   `.\n\
+!....YBBBBBBBBBBBBBBbaaitf68BBBBBBRPFT?!:::::::::     `.\n\
+!......YBBBBBBBBBBBBBBBBBBBRPFT?!::::::;:!^'`;:::       `.\n\
+!........YBBBBBBBBBBRPFT?!::::::::::^''...::::::;         iBBbo.\n\
+`..........YBRPFT?!::::::::::::::::::::::::;iof68bo.      WBBBBbo.\n\
+  `..........:::::::::::::::::::::::;iof688888888888b.     `YBBBP^'\n\
+    `........::::::::::::::::;iof688888888888888888888b.     `\n\
+      `......:::::::::;iof688888888888888888888888888888b.\n\
+        `....:::;iof688888888888888888888888888888888899fT!\n\
+          `..::!8888888888888888888888888888888899fT|!^''\n\
+            `' !!988888888888888888888888899fT|!^'''\n\
+                `!!8888888888888888899fT|!^\"'\n\
+                  `!988888888899fT|!^\"'\n\
+                    `!9899fT|!^\"'\n\
+                      `!^\"'\n";
+  
+  // printf(sizeof(text));
+  if(sizeof(text) > size) return -1;
+  strncpy((char *)buf, text, size);
+  return sizeof(text);
+
+}
+
 int
 sys_fork(void)
 {
@@ -88,4 +155,4 @@
   xticks = ticks;
   release(&tickslock);
   return xticks;
-}
+}
\ No newline at end of file
diff -ruN original/thread.c xv6/thread.c
--- original/thread.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6/thread.c	2022-09-05 19:29:24.926763672 +0530
@@ -0,0 +1,157 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+#include "x86.h"
+
+struct balance 
+{
+ char name[32];
+ int amount;
+};
+
+struct spinlock {
+  uint locked;       // Is the lock held?
+  char *name;        // Name of lock.
+};
+
+void
+thread_spin_init(struct spinlock *lk, char *name)
+{
+  lk->name = name;
+  lk->locked = 0;
+}
+
+// Check whether this cpu is holding the lock.
+int
+holding(struct spinlock *lock)
+{
+  int r;
+  r = lock->locked;
+  return r;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+// Holding a lock for a long time may cause
+// other CPUs to waste time spinning to acquire it.
+void
+thread_spin_lock(struct spinlock *lk)
+{
+
+  // The xchg is atomic.
+  // Until lock is free, aka its value is 0, the while loop runs
+  // which means processor is stuck here until context switch happens and frees
+  // the lock at some point and comes back to this thread.
+  while(xchg(&lk->locked, 1) != 0)
+    ;
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen after the lock is acquired.
+  __sync_synchronize();
+
+}
+
+// Release the lock.
+void
+thread_spin_unlock(struct spinlock *lk)
+{
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other cores before the lock is released.
+  // Both the C compiler and the hardware may re-order loads and
+  // stores; __sync_synchronize() tells them both not to.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code can't use a C assignment, since it might
+  // not be atomic. A real OS would use C atomics here.
+  asm volatile("movl $0, %0" : "+m" (lk->locked) : );
+
+}
+
+/// why pushcli and popcli are not required?? ans?
+
+struct thread_mutex {
+  uint locked;       // Is the lock held?
+};
+
+void thread_mutex_init(struct thread_mutex *m){
+    m->locked = 0;
+}
+void thread_mutex_lock(struct thread_mutex *m)
+{
+  while(xchg(&m->locked, 1) != 0)
+    sleep(1);
+  __sync_synchronize();
+}
+void thread_mutex_unlock(struct thread_mutex *m)
+{
+//   unlock(m);
+  __sync_synchronize();
+  asm volatile("movl $0, %0" : "+m" (m->locked) : );
+}
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay (unsigned int d) 
+{
+ unsigned int i; 
+ for (i = 0; i < d; i++) 
+ {
+ __asm volatile( "nop" ::: );
+ }
+ return i; 
+}
+
+struct spinlock lock;
+char* name = "testlock";
+
+struct thread_mutex mutexlock;
+
+void do_work(void *arg)
+{
+ 
+ printf(1,"Entering process .... ?");
+ int i; 
+ int old;
+ struct balance *b = (struct balance*) arg; 
+ printf(1, "Starting do_work: s:%s\n", b->name);
+ for (i = 0; i < b->amount; i++) 
+ { 
+
+    thread_spin_lock(&lock);
+    // thread_mutex_lock(&mutexlock);
+
+    old = total_balance;
+    delay(100000);
+    total_balance = old + 1;
+
+    thread_spin_unlock(&lock);
+    // thread_mutex_unlock(&mutexlock);
+ }
+ printf(1, "Done s:%x %s\n", b->name, b->name);
+ thread_exit();
+ return;
+}
+
+int main(int argc, char *argv[]) {
+ struct balance b1 = {"b1", 3200};
+ struct balance b2 = {"b2", 2800};
+ void *s1, *s2;
+ int t1, t2, r1, r2;
+ s1 = malloc(4096);
+ s2 = malloc(4096);
+
+ thread_spin_init(&lock, name);
+ thread_mutex_init(&mutexlock);
+
+ t1 = thread_create(do_work, (void*)&b1, s1);
+ t2 = thread_create(do_work, (void*)&b2, s2); 
+ r1 = thread_join();
+ r2 = thread_join();
+ printf(1, "Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", 
+ t1, r1, t2, r2, total_balance);
+ exit();
+}
\ No newline at end of file
diff -ruN original/user.h xv6/user.h
--- original/user.h	2022-09-04 16:46:33.614528245 +0530
+++ xv6/user.h	2022-08-29 23:27:40.465024785 +0530
@@ -23,6 +23,12 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int draw(void*, uint);
+
+//  ??
+int thread_create(void(*fcn)(void*), void *arg, void*stack);
+int thread_join(void);
+int thread_exit(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff -ruN original/usys.S xv6/usys.S
--- original/usys.S	2022-09-04 16:46:33.614528245 +0530
+++ xv6/usys.S	2022-08-29 23:27:32.385024656 +0530
@@ -29,3 +29,7 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(draw)
+SYSCALL(thread_create)
+SYSCALL(thread_join)
+SYSCALL(thread_exit)
\ No newline at end of file
